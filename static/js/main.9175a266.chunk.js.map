{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","console","log","className","id","main","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","temp","wind","speed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKAGMA,EACC,mCADDA,EAEE,2CAgFOC,MA5Ef,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAkCb,OAFAC,QAAQC,IAAIH,GAGV,qBAAKI,UAAU,eAAf,SACE,qBAAKC,GAAG,MAAMD,UAAmC,oBAAhBJ,EAAQM,KAAqD,SAA5BN,EAAQA,QAAQ,GAAGM,KAAmB,sBAAqD,WAA5BN,EAAQA,QAAQ,GAAGM,KAAsB,wBAAuD,SAA5BN,EAAQA,QAAQ,GAAGM,KAAmB,sBAAoD,UAA5BN,EAAQA,QAAQ,GAAGM,KAAoB,YAAc,MAAS,MAAjU,SACE,iCACE,sBAAKF,UAAU,aAAf,UACE,uBAAOG,KAAK,OACVH,UAAU,aACVI,YAAY,2CACZC,SAAU,SAAAC,GAAC,OAAIX,EAASW,EAAEC,OAAOC,QACjCA,MAAOd,EACPe,WAvCG,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAIrB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDsB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJnB,EAAWmB,GACXrB,EAAS,IACTG,QAAQC,IAAIiB,SAkCV,qBAAKhB,UAAmC,oBAAhBJ,EAAQM,KAAuB,SAAW,eAAlE,4BAEuB,oBAAhBN,EAAQM,KACX,gCACI,sBAAKF,UAAU,eAAf,UACI,sBAAKA,UAAU,WAAf,UAA2BJ,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,WACvD,qBAAKnB,UAAU,OAAf,SAlCF,SAACoB,GACnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAyBSE,CAAY,IAAIC,WAE3C,sBAAK9B,UAAU,cAAf,UACI,sBAAKA,UAAU,OAAf,UAAuB+B,KAAKC,MAAMpC,EAAQM,KAAK+B,MAA/C,WACA,sBAAKjC,UAAU,kBAAf,UACI,qBAAKA,UAAwC,SAA5BJ,EAAQA,QAAQ,GAAGM,KAAmB,OAAsC,WAA5BN,EAAQA,QAAQ,GAAGM,KAAqB,SAAwC,SAA5BN,EAAQA,QAAQ,GAAGM,KAAmB,OAAS,kBACpK,qBAAKF,UAAU,UAAf,SAA0BJ,EAAQA,QAAQ,GAAGM,aAGrD,sBAAKF,UAAU,OAAf,UACI,qBAAKA,UAAU,eAEf,sBAAKA,UAAU,aAAf,UACKJ,EAAQsC,KAAKC,MADlB,gBAKP,WClEFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.9175a266.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n\nconst api = {\n  key: \"ecc00cf228e23a00290f425ae759b202\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result)\n        })\n    }\n  }\n\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  // const appId = document.getElementById('app')\n  // console.log(appId)\n  console.log(weather)\n\n  return (\n    <div className=\"app__wrapper\">\n      <div id=\"app\" className={(typeof weather.main != \"undefined\") ? ((weather.weather[0].main === 'Rain') ? 'app rain-background' : (weather.weather[0].main === 'Clouds') ?  'app clouds-background' : (weather.weather[0].main === 'Snow') ? 'app snow-background' :(weather.weather[0].main === 'Clear') ? 'app sunny' : 'app') : 'app'}>\n        <main>\n          <div className=\"search-box\">\n            <input type=\"text\"\n              className=\"search-bar\"\n              placeholder=\"Enter the name of the country or city...\"\n              onChange={e => setQuery(e.target.value)}\n              value={query}\n              onKeyPress={search}\n            />\n            <div className={(typeof weather.main != \"undefined\") ? 'title ' : 'title active'}>Weather App</div>\n          </div>\n          {(typeof weather.main != \"undefined\") ? (\n                <div>\n                    <div className=\"location-box\">\n                        <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n                        <div className=\"date\">{dateBuilder(new Date())}</div>\n                    </div>\n                    <div className=\"weather-box\">\n                        <div className=\"temp\">{Math.round(weather.main.temp)}Â°c</div>\n                        <div className=\"weater__wrapper\">\n                            <div className={(weather.weather[0].main === 'Rain') ? 'rain' : (weather.weather[0].main === 'Clouds') ? 'clouds' : (weather.weather[0].main === 'Snow') ? 'snow' : 'weather__icon'}></div>\n                            <div className=\"weather\">{weather.weather[0].main}</div>\n                        </div>\n                    </div>\n                    <div className=\"wind\">\n                        <div className=\"wind__icon\">\n                        </div>\n                        <div className=\"wind__data\">\n                            {weather.wind.speed} m/s\n                        </div>\n                    </div>\n                </div>\n            ) : ('')}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}